import * as React from "react";
import { GridProps, SelectFieldProps, TextFieldProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type FlexifitFeedbackCreateFormInputValues = {
    candidateName?: string;
    candidateId?: string;
    candidateLocation?: string;
    interviewer?: string;
    interviewDate?: string;
    jobLocation?: string;
    roles?: string;
    interviewerJobLocation?: string;
    typeOfContract?: string;
    driveToWork?: string;
    careerAmbition?: string;
    financialDrive?: string;
    learningReadiness?: string;
    jobSearch?: string;
    jobSuccess?: string;
    lastWorked?: string;
    maritalStatus?: string;
    singleType?: string;
    kidsAge?: string;
    spouseSupportKids?: string;
    helperSupportKids?: string;
    familySupportKids?: string;
    spouseSupportHousehold?: string;
    helperSupportHousehold?: string;
    familySupportHousehold?: string;
    careGiving?: string;
    extentOfCareGiving?: string;
    helperSupportCareGiving?: string;
    readyToExtendSupport?: string;
    OtherCommitments?: string;
    comment?: string;
};
export declare type FlexifitFeedbackCreateFormValidationValues = {
    candidateName?: ValidationFunction<string>;
    candidateId?: ValidationFunction<string>;
    candidateLocation?: ValidationFunction<string>;
    interviewer?: ValidationFunction<string>;
    interviewDate?: ValidationFunction<string>;
    jobLocation?: ValidationFunction<string>;
    roles?: ValidationFunction<string>;
    interviewerJobLocation?: ValidationFunction<string>;
    typeOfContract?: ValidationFunction<string>;
    driveToWork?: ValidationFunction<string>;
    careerAmbition?: ValidationFunction<string>;
    financialDrive?: ValidationFunction<string>;
    learningReadiness?: ValidationFunction<string>;
    jobSearch?: ValidationFunction<string>;
    jobSuccess?: ValidationFunction<string>;
    lastWorked?: ValidationFunction<string>;
    maritalStatus?: ValidationFunction<string>;
    singleType?: ValidationFunction<string>;
    kidsAge?: ValidationFunction<string>;
    spouseSupportKids?: ValidationFunction<string>;
    helperSupportKids?: ValidationFunction<string>;
    familySupportKids?: ValidationFunction<string>;
    spouseSupportHousehold?: ValidationFunction<string>;
    helperSupportHousehold?: ValidationFunction<string>;
    familySupportHousehold?: ValidationFunction<string>;
    careGiving?: ValidationFunction<string>;
    extentOfCareGiving?: ValidationFunction<string>;
    helperSupportCareGiving?: ValidationFunction<string>;
    readyToExtendSupport?: ValidationFunction<string>;
    OtherCommitments?: ValidationFunction<string>;
    comment?: ValidationFunction<string>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type FlexifitFeedbackCreateFormOverridesProps = {
    FlexifitFeedbackCreateFormGrid?: PrimitiveOverrideProps<GridProps>;
    candidateName?: PrimitiveOverrideProps<TextFieldProps>;
    candidateId?: PrimitiveOverrideProps<TextFieldProps>;
    candidateLocation?: PrimitiveOverrideProps<TextFieldProps>;
    interviewer?: PrimitiveOverrideProps<TextFieldProps>;
    interviewDate?: PrimitiveOverrideProps<TextFieldProps>;
    jobLocation?: PrimitiveOverrideProps<TextFieldProps>;
    roles?: PrimitiveOverrideProps<SelectFieldProps>;
    interviewerJobLocation?: PrimitiveOverrideProps<TextFieldProps>;
    typeOfContract?: PrimitiveOverrideProps<SelectFieldProps>;
    driveToWork?: PrimitiveOverrideProps<SelectFieldProps>;
    careerAmbition?: PrimitiveOverrideProps<SelectFieldProps>;
    financialDrive?: PrimitiveOverrideProps<SelectFieldProps>;
    learningReadiness?: PrimitiveOverrideProps<SelectFieldProps>;
    jobSearch?: PrimitiveOverrideProps<SelectFieldProps>;
    jobSuccess?: PrimitiveOverrideProps<SelectFieldProps>;
    lastWorked?: PrimitiveOverrideProps<SelectFieldProps>;
    maritalStatus?: PrimitiveOverrideProps<SelectFieldProps>;
    singleType?: PrimitiveOverrideProps<SelectFieldProps>;
    kidsAge?: PrimitiveOverrideProps<SelectFieldProps>;
    spouseSupportKids?: PrimitiveOverrideProps<SelectFieldProps>;
    helperSupportKids?: PrimitiveOverrideProps<SelectFieldProps>;
    familySupportKids?: PrimitiveOverrideProps<SelectFieldProps>;
    spouseSupportHousehold?: PrimitiveOverrideProps<SelectFieldProps>;
    helperSupportHousehold?: PrimitiveOverrideProps<SelectFieldProps>;
    familySupportHousehold?: PrimitiveOverrideProps<SelectFieldProps>;
    careGiving?: PrimitiveOverrideProps<SelectFieldProps>;
    extentOfCareGiving?: PrimitiveOverrideProps<SelectFieldProps>;
    helperSupportCareGiving?: PrimitiveOverrideProps<SelectFieldProps>;
    readyToExtendSupport?: PrimitiveOverrideProps<SelectFieldProps>;
    OtherCommitments?: PrimitiveOverrideProps<SelectFieldProps>;
    comment?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type FlexifitFeedbackCreateFormProps = React.PropsWithChildren<{
    overrides?: FlexifitFeedbackCreateFormOverridesProps | undefined | null;
} & {
    clearOnSuccess?: boolean;
    onSubmit?: (fields: FlexifitFeedbackCreateFormInputValues) => FlexifitFeedbackCreateFormInputValues;
    onSuccess?: (fields: FlexifitFeedbackCreateFormInputValues) => void;
    onError?: (fields: FlexifitFeedbackCreateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: FlexifitFeedbackCreateFormInputValues) => FlexifitFeedbackCreateFormInputValues;
    onValidate?: FlexifitFeedbackCreateFormValidationValues;
} & React.CSSProperties>;
export default function FlexifitFeedbackCreateForm(props: FlexifitFeedbackCreateFormProps): React.ReactElement;
